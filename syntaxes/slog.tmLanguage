<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>comment</key>
	<string>
		A Slog Grammar file
	</string>
	<key>fileTypes</key>
	<array>
		<string>slog</string>
		<string>sss</string>
	</array>
	<key>keyEquivalent</key>
	<string>^~S</string>
	<key>name</key>
	<string>Slog</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#comment</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#sexp</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#string</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#language-functions</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#quote</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#illegal</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>comment</key>
		<dict>
			<key>begin</key>
			<string>(^[ \t]+)?(?=;)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.whitespace.comment.leading.slog</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?!\G)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>;</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.slog</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\n</string>
					<key>name</key>
					<string>comment.line.semicolon.slog</string>
				</dict>
			</array>
		</dict>
		<key>constants</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>#[t|f]</string>
					<key>name</key>
					<string>constant.language.boolean.slog</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=[\(\s])((#e|#i)?[0-9]+(\.[0-9]+)?|(#x)[0-9a-fA-F]+|(#o)[0-7]+|(#b)[01]+)(?=[\s;()'",\[\]])</string>
					<key>name</key>
					<string>constant.numeric.slog</string>
				</dict>
			</array>
		</dict>
		<key>illegal</key>
		<dict>
			<key>match</key>
			<string>[()\[\]]</string>
			<key>name</key>
			<string>invalid.illegal.parenthesis.slog</string>
		</dict>
		<key>language-functions</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?x)
						(?&lt;=(\s|\(|\{)) # preceded by space or ( 
						( maximum|minimum|or|sum|count|count-by|--&gt;|&lt;--|-- )
						(?=(\s|\())</string>
					<key>name</key>
					<string>keyword.control.slog</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>
						+, -, *, /, =, &gt;, etc. 
					</string>
					<key>match</key>
					<string>(?x)
						(?&lt;=(\s|\()) # preceded by space or (
						( &gt;=?|&lt;=?|=|[*/+-])
						(?=(\s|\()) # followed by space or (
						</string>
					<key>name</key>
					<string>keyword.operator.arithmetic.slog</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
						(?&lt;=(\s|\(|\{)) # preceded by space or (
						( foo
						)
						(?=(\s|\(|\{)) # followed by space or (
					</string>
					<key>name</key>
					<string>support.function.general.slog</string>
				</dict>
			</array>
		</dict>
		<key>quote</key>
		<dict>
			<key>comment</key>
			<string>
				We need to be able to quote any kind of item, which creates
				a tiny bit of complexity in our grammar.  It is hopefully
				not overwhelming complexity.
				
				Note: the first two matches are special cases.  quoted
				symbols, and quoted empty lists are considered constant.other
				
			</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.quoted.symbol.slog</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
						(')\s*
						([[:alnum:]][[:alnum:]!$%&amp;*+-./:&lt;=&gt;?@^_~]*)
					</string>
					<key>name</key>
					<string>constant.other.symbol.slog</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.quoted.empty-list.slog</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>meta.expression.slog</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.expression.begin.slog</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.expression.end.slog</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
						(')\s*
						((\()\s*(\)))
					</string>
					<key>name</key>
					<string>constant.other.empty-list.schem</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(')\s*</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.quoted.slog</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>quoted double-quoted string or s-expression</string>
					<key>end</key>
					<string>(?=[\s()])|(?&lt;=\n)</string>
					<key>name</key>
					<string>string.other.quoted-object.slog</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#quoted</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>quote-sexp</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;=\()\s*(quote)\s+</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.quote.slog</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>
				Something quoted with (quote «thing»).  In this case «thing»
				will not be evaluated, so we are considering it a string.
			</string>
			<key>contentName</key>
			<string>string.other.quote.slog</string>
			<key>end</key>
			<string>(?=[\s)])|(?&lt;=\n)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#quoted</string>
				</dict>
			</array>
		</dict>
		<key>quoted</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.expression.begin.slog</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.expression.end.slog</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.expression.slog</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#quoted</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#quote</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#illegal</string>
				</dict>
			</array>
		</dict>
		<key>sexp</key>
		<dict>
			<key>begin</key>
			<string>(\()([[:alnum:]][[:alnum:]!$%&amp;*+-./:&lt;=&gt;?@^_~]*)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.expression.begin.slog</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.slog</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\))(\n)?</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.expression.end.slog</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>meta.after-expression.slog</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.expression.slog</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)
						(?&lt;=(\s|\(|\{))       # preceded by (
						(define)\s+   # define
						(\()          # list of parameters
						  ([[:alnum:]][[:alnum:]!$%&amp;*+-./:&lt;=&gt;?@^_~]*)
						  ((\s+
						    ([[:alnum:]][[:alnum:]!$%&amp;*+-./:&lt;=&gt;?@^_~]*|[._])
						   )*
						  )\s*
						(?=(\s|\)|\}))
					</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.slog</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.function.slog</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.slog</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.function.slog</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.function.slog</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=\))</string>
					<key>name</key>
					<string>meta.declaration.procedure.slog</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#sexp</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#illegal</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#quote-sexp</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#quote</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#language-functions</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#constants</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=[\(\s])(#\\)(space|newline|tab)(?=[\s\)])</string>
					<key>name</key>
					<string>constant.character.named.slog</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=[\(\s])(#\\)x[0-9A-F]{2,4}(?=[\s\)])</string>
					<key>name</key>
					<string>constant.character.hex-literal.slog</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=[\(\s])(#\\).(?=[\s\)])</string>
					<key>name</key>
					<string>constant.character.escape.slog</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>
						the . in (a . b) which conses together two elements
						a and b. (a b c) == (a . (b . (c . nil)))
					</string>
					<key>match</key>
					<string>(?&lt;=[ ()])\.(?=[ ()])</string>
					<key>name</key>
					<string>punctuation.separator.cons.slog</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#sexp</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#illegal</string>
				</dict>
			</array>
		</dict>
		<key>string</key>
		<dict>
			<key>begin</key>
			<string>(")</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.slog</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(")</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.slog</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.slog</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>constant.character.escape.slog</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.slog</string>
</dict>
</plist>
